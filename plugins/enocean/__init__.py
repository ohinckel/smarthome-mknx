#!/usr/bin/pythonimport serialimport osimport sysimport loggingimport structimport time#CO_RD_VERSION 3FCSTAB = [    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,    0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,    0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65,    0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,    0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5,    0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,    0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85,    0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,    0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2,    0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,    0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2,    0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,    0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32,    0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,    0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42,    0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,    0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c,    0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,    0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec,    0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,    0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c,    0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,    0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c,    0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,    0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b,    0x76, 0x71, 0x78, 0x7f, 0x6A, 0x6d, 0x64, 0x63,    0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b,    0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,    0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb,    0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8D, 0x84, 0x83,    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb,    0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3    ]TYPE_ID = {            #'0X00':['data[-5:-1]','RESERVED'],            '0X01':['data[-5:-1]','RADIO'],           }RADIO_PAYLOAD_VALUE = {            'F6_02_02':{'payload_idx':'data[1]',                'entities':{                    'A1':'pl == 16','A0':'pl == 48','B1':'pl == 80','B0':'pl == 112','A1B1':'pl == 21','A0B0':'pl == 55'                },},            'F6_02_03':{'payload_idx':'data[1:4]',                'entities':{                    'foo':'foo_transform',},                    'sonder':'locke',},            }  logger = logging.getLogger('EnOcean')class EnOceanType():    def switch():        passclass EnOcean():    _items = []    _valid_ids = []        def __init__(self, smarthome, serialport):        self._sh = smarthome        self.port = serialport        self._tcm = serial.Serial(serialport, 57600, timeout=0.5)    def run(self):        self.alive = True        global from_shell        from_shell = False        self.connect()        msg = []        while self.alive and True:            readin = self._tcm.read(1000)            if readin:                msg += readin                     # check if header is complete (6bytes including sync)                # 0x55 (SYNC) + 4bytes (HEADER) + 1byte(CRC)                while (len(msg) >= 5):                    #check header for CRC                    if (msg[0] == 0x55) and (self._calc_crc8(msg[1:5]) == msg[5]):                        # header bytes: length of data; length of data; optional length; packet type                        ### HEADER RECEIVED ###                        header = msg[:6]                        #print ('header: {}'.format(header))                                                ### HEADER_DATA_LENTGH ###                        data_length = (header[1] << 8) + header[2] #data                        #print ("data_length:{}".format(data_length))                                                ### HEADER_OPT_DATA_LENGTH ###                        opt_length = header[3]                  #opt                        #print ("opt_length:{}".format(opt_length))                                                ### HEADER_PACKET_TYPE ###                        packet_type = header[4]                        #print ("packet_type:{}".format(packet_type))                                                ### CALCULATED MESSAGE_LENTGH FROM HEADER ###                        msg_length = data_length + opt_length + 7                        #print ("msg_length:{}".format(msg_length))                                                # check if data is complete (and ok):                        if (len(msg) < msg_length):                            break                                                    ### RECEIVED ###                            if (self._calc_crc8(msg[6:msg_length-1]) == msg[msg_length-1]):                            self._complete =  True                            print ('RX: {}'.format(msg[0:msg_length])) #print data                                                    ### DATA ###                            data=msg[6:msg_length-(opt_length+1)]                            print ("data: {}".format(data))                                                        ### OPT_DATA ###                            opt=msg[(6+data_length):msg_length-1]                            if len(opt) > 0:                                print ("opt: {}".format(opt))                                                        ### GET SENDER_ID BY TYPE ###                            str_packet_type = '0X%02x' %packet_type #convert int to hex with uppercase and leading zeros                            if str_packet_type in TYPE_ID:                                sender_id = eval(TYPE_ID[str_packet_type][0])                                sender_id = self.readable_id(sender_id)                                packet_type_readable = TYPE_ID[str_packet_type][1]                                print ("Supportet Telegram Type: {}".format(packet_type_readable))                                ### CHECK SENDER_ID ###                                if sender_id in self._valid_ids:                                    print ("Valid ID: {}".format(sender_id))                                    print ("Eval Telegram")                                    self.eval_telegram(packet_type_readable, sender_id, data, opt)                                else:                                    print ("No valid ID: {}".format(sender_id))                            else:                                print ("Not Supportet Telegram Type:{}".format(packet_type))                        msg = msg[msg_length:]                    else:                        msg.pop(0)    def eval_telegram(self, packet_type_readable, sender_id, data, opt):        #print (data)        valid = False        for item in self._items:            # validate id for item id:            if item.conf['enocean_id'] == sender_id:                #print ("validated {0} for {1}".format(sender_id,item))                #print ("try to get value for: {0} and {1}".format(item.conf['enocean_rorg'][0],item.conf['enocean_rorg'][1]))                rorg = item.conf['enocean_rorg']                eval_value = item.conf['enocean_value']            ### RADIO ###                if packet_type_readable == 'RADIO':                    #print (RADIO_PAYLOAD_VALUE[rorg]['payload_idx'])                       if rorg in RADIO_PAYLOAD_VALUE: #check if RORG exists                        pl = eval(RADIO_PAYLOAD_VALUE[rorg]['payload_idx'])                        #could be nicer                        for entity in RADIO_PAYLOAD_VALUE:                             if (rorg == entity) and (eval_value in RADIO_PAYLOAD_VALUE[rorg]['entities']):                                value_dict = RADIO_PAYLOAD_VALUE[rorg]['entities']                                value = eval(RADIO_PAYLOAD_VALUE[rorg]['entities'][eval_value])                                #print ("Resulting value: {0} for {1}".format(value,item))                                if value: # not shure about this                                    item(value, 'EnOcean', 'RADIO')                                                                #OPT_DATA FROM RADIO - JUST FOR INFORMATION                                    if len(opt) > 0:                                        ### SUB_TEL_NUMBER ###                                        SubTelNumber = opt[0]                                        print ("SubTelNumber: {}".format(opt[0]))                                        ### DESTINATION ###                                        Destination = self.readable_id(opt[1:5])                                        print ("Destination: {}".format(self.readable_id(opt[1:5])))                                        ### LINK_QUALITY ###                                        LinkQuality = opt[5]                                        print ("dBm: -{}".format(LinkQuality))                                        ### SECURITY_LEVEL ###                                        SecurityLevel = opt[6]                                        print ("SecurityLevel: {}".format(SecurityLevel))                                                        ### RESPONSE ###                if packet_type_readable == 'RESPONSE':                    pass                                                            def parse_item(self, item):        if 'enocean_id' in item.conf:            enocean_id = item.conf['enocean_id']            if ('enocean_rorg' and 'enocean_value') in item.conf:                self._valid_ids.append(enocean_id)                self._items.append(item)                return self.update_item                 def update_item(self, item, caller=None, source=None, dest=None):        if caller != 'EnOcean':            if item():                pass    def readable_id(self,ints):        hex_string = ''        for i in ints:            hex_string += "%0.2X" % i        hex_string = ':'.join(hex_string[i:i+2] for i in range(0,8,2))        return hex_string                    def stop(self):        self.alive = False    def connect(self):        logger.debug("EnOcean: connect")        # request version information / firmware        self._send([0x55, 0x00, 0x01, 0x00, 0x05, 0x00, 0x03, 0x00])        #0x03 = CO_RD_VERSION = Read the device (SW) version / (HW) version, chip ID etc.            def radio(self, msg):        self._send([0x55, (len(msg) >> 8), (len(msg) & 0xFF), 0x07, 0x01, 0x00] + msg + [0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00])        # SYNC,DataLength,DataLength,OptLength,PacketType,CRC + DATA + SubTelNum,DestinationID,DestinationID,DestinationID,DestinationID,dBm,SecurityLevel        # 0xFF 0xFF 0xFF 0xFF ---> Broadcast    def _calc_crc8(self, msg, crc=0):        for i in msg:            crc = FCSTAB[crc ^ i]        return crc            def _send(self, msg):        msg[5] = self._calc_crc8(msg[1:5])        msg[-1] = self._calc_crc8(msg[6:-1])        send = msg        print ('TX: {}'.format(msg))        self._tcm.write(bytearray(msg))def main():    try:        if sys.argv[1]:            serialport = sys.argv[1]            print ("TCM310 on {0}".format(serialport))        smarthome = ''        global from_shell        from_shell = True        tcm = EnOcean(smarthome,serialport)        tcm.run()    except Exception as e:        print ("[main]: {0}".format(e))        print ("usage: __init__.py <serial_port>")        return 1if __name__ == "__main__":    sys.exit(main())